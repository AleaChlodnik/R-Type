/*
** EPITECH PROJECT, 2024
** R-Type
** File description:
** main
*/

#include <Net/server.hpp>
#include <iostream>

#include <errno.h>
#include <signal.h>
#include <stdio.h>

/**
 * @brief A static boolean flag to control the main loop execution.
 *
 * This variable is used to determine whether the main loop should continue running.
 * It is set to true initially, and can be modified to false to stop the loop.
 */
static bool loopRunning = true;

/**
 * @brief Signal handler for SIGINT.
 *
 * This function is called when the program receives a SIGINT signal (usually generated by pressing
 * Ctrl+C). It sets the global variable `loopRunning` to false, which can be used to gracefully
 * terminate a running loop.
 *
 * @param signal The signal number received by the handler.
 */
void signal_handler(int signal)
{
    if (signal == SIGINT)
        loopRunning = false;
}

/**
 * @brief Validates if a given string represents a valid port number.
 *
 * This function checks if the provided string is a valid port number
 * within the range of 1024 to 65535. It performs the following checks:
 * - The string is not empty and does not exceed 5 characters in length.
 * - The string contains only digit characters.
 * - The integer value of the string is within the valid port range.
 *
 * @param portStr The string representation of the port number to validate.
 * @return true if the string is a valid port number within the range 1024-65535, false otherwise.
 */
static bool isValidPort(const std::string &portStr)
{
    // Check if the port string is empty or too long
    if (portStr.empty() || portStr.length() > 5) {
        return false;
    }

    // Check if the string contains only digits
    for (char c : portStr) {
        if (!isdigit(c)) {
            return false;
        }
    }

    // Convert the string to an integer
    int port = std::stoi(portStr);

    // Check if the port is within the valid range (0-65535)
    return port >= 1024 && port <= 65535;
}

/**
 * @brief Entry point for the server application.
 *
 * This function initializes the server, sets up signal handling, and enters the main loop.
 *
 * @param argc The number of command-line arguments.
 * @param argv The array of command-line arguments.
 *             The first argument should be the port number on which the server will listen.
 *
 * @return Returns an error code if the usage is incorrect or the port number is invalid.
 *         Returns OK upon successful execution.
 */
int main(int const argc, char const *const *const argv)
{
    if (argc != 2) {
        std::cerr << "Usage: ./server <port>" << std::endl;
        return ERROR;
    }
    if (!isValidPort(argv[1])) {
        std::cerr << "Invalid port number, 1023 < port < 65536" << std::endl;
        return ERROR;
    }

    r_type::net::Server server(std::stoi(argv[1]));
    server.Start();

    signal(SIGINT, signal_handler);

    while (loopRunning) {
        server.Update(-1, true);
    }

    return OK;
}